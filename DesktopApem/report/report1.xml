<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="11" skipped="0" tests="80" time="4487.729" timestamp="2022-02-17T08:24:14.122060" hostname="apem-c-d7"><testcase classname="test_VS580300_320_352" name="test_loginok" time="15.818"><failure message="AssertionError: assert 'process-order' in 'HttpErrorResponse 500 - 500'&#10; +  where 'HttpErrorResponse 500 - 500' = login('corp\\qapart', 'QQQaaa000', '580300')">def test_loginok():
&gt;       assert "process-order" in login('corp\\qapart', 'QQQaaa000','580300')
E       AssertionError: assert 'process-order' in 'HttpErrorResponse 500 - 500'
E        +  where 'HttpErrorResponse 500 - 500' = login('corp\\qapart', 'QQQaaa000', '580300')

test_VS580300_320_352.py:47: AssertionError</failure></testcase><testcase classname="test_VS580300_320_352" name="test_nodomain" time="15.438" /><testcase classname="test_VS580300_320_352" name="test_Invalid" time="15.247"><failure message="AssertionError: assert 'Invalid username or password. Please re-enter domain\\username and password.' in ''&#10; +  where '' = login('jhh\\hahahha', 'hdhdhhdhd', '580320')">def test_Invalid():
&gt;       assert "Invalid username or password. Please re-enter domain\\username and password." in login('jhh\\hahahha', 'hdhdhhdhd','580320')
E       AssertionError: assert 'Invalid username or password. Please re-enter domain\\username and password.' in ''
E        +  where '' = login('jhh\\hahahha', 'hdhdhhdhd', '580320')

test_VS580300_320_352.py:54: AssertionError</failure></testcase><testcase classname="test_VS580300_320_352" name="test_Denied" time="15.244" /><testcase classname="test_VS580300_320_352" name="test_login_ui" time="7.394" /><testcase classname="test_VS580358.Testtitle_bar" name="test_loading" time="21.152" /><testcase classname="test_VS580358.Testtitle_bar" name="test_userinfo" time="21.052" /><testcase classname="test_VS580358.Testtitle_bar" name="test_help" time="21.121" /><testcase classname="test_VS580358.Testtitle_bar" name="test_fullscreen" time="21.089" /><testcase classname="test_VS580358.Testtitle_bar" name="test_desktop_switch" time="21.137" /><testcase classname="test_VS580358.Testtitle_bar" name="test_warning" time="21.147" /><testcase classname="test_VS580360" name="test_loginuser" time="26.416" /><testcase classname="test_VS580360" name="test_logout" time="29.455" /><testcase classname="test_VS580362" name="test_help" time="30.787" /><testcase classname="test_VS580364" name="test_warning" time="21.588" /><testcase classname="test_VS580365" name="test_layout" time="34.860" /><testcase classname="test_VS580369" name="test_fullscreen" time="27.563" /><testcase classname="test_VS580450" name="test_navigate" time="21.967" /><testcase classname="test_VS580455.Test_filter" name="test_datefilter" time="77.966" /><testcase classname="test_VS580455.Test_filter" name="test_numberfilter" time="73.704" /><testcase classname="test_VS580455.Testtextfilter" name="test_selectall" time="234.670" /><testcase classname="test_VS580455.Testtextfilter" name="test_filterclear" time="78.807" /><testcase classname="test_VS580455.Testtextfilter" name="test_filterrandom" time="117.451"><failure message="AssertionError: assert 5 == 6&#10; +  where 5 = len(['', '', '', '', ''])">self = &lt;testcase.test_VS580455.Testtextfilter object at 0x00000129E2591790&gt;
browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="e08d6ac14c431a5da110944ff5bf3af6")&gt;

    def test_filterrandom(self, browser):
        prepare(browser).login_after()
        table_head_list = Common(browser).get_tablehead()
        for l in range(1, len(table_head_list)):
            head_name = table_head_list[l].find_elements_by_tag_name('div')[2].text
            if head_name not in ('Rep.', 'Ver.', 'Quantity', 'Date', 'End Date', 'Status'):
                if head_name == 'PO':
                    headid = "header" + head_name + " "
                else:
                    headid = "header" + head_name
                target = browser.find_element_by_id(headid)
                browser.execute_script("arguments[0].scrollIntoView();", target)
                time.sleep(3)
                mat_list = func_for_table(browser).test_selectone(table_head_list[l])
                num = random.choice(range(len(mat_list)))
                check_data = mat_list[num]
                mat_text = check_data.find_elements_by_tag_name("div")[2].text
                browser.execute_script("arguments[0].click();", check_data)
                target = browser.find_element_by_xpath("/html/body/div[2]/div[1]")
                browser.execute_script("arguments[0].click();", target)
                time.sleep(2)
                browser.get_screenshot_as_file(r"..\\report\\result_picture\\" + head_name + "_selectone.png")
                td_path = "/html/body/app-root/div/app-process-order/div/div[2]/table/tbody/tr/td[" + str(l + 2) + "]"
                td_list = browser.find_elements_by_xpath(td_path)
                td_data = Common(browser).td_data(td_list)
                if len(mat_list) == 1 and mat_text == '(Blank)':
                    # 7 is the total number of table data
&gt;                   assert len(td_data) == 6
E                   AssertionError: assert 5 == 6
E                    +  where 5 = len(['', '', '', '', ''])

test_VS580455.py:166: AssertionError</failure></testcase><testcase classname="test_VS580455.Testtextfilter" name="test_cancel" time="98.832" /><testcase classname="test_VS580455.Testtextfilter" name="test_search" time="267.822" /><testcase classname="test_VS580519.TestSort" name="test_sort" time="217.397" /><testcase classname="test_VS580550.Testvisiblecols" name="test_defaultcols" time="26.438" /><testcase classname="test_VS580550.Testvisiblecols" name="test_visiblecols" time="93.784" /><testcase classname="test_VS580550.Testvisiblecols" name="test_cancelcols" time="83.229" /><testcase classname="test_VS580580" name="test_scroll" time="109.117" /><testcase classname="test_VS580588.Testsearch" name="test_search" time="29.041" /><testcase classname="test_VS585400" name="test_defstatus" time="21.898" /><testcase classname="test_VS585400" name="test_Allstatus" time="25.612" /><testcase classname="test_VS585400" name="test_color" time="25.421" /><testcase classname="test_VS585400" name="test_tr_height" time="36.874" /><testcase classname="test_VS585400" name="test_Circle" time="25.485" /><testcase classname="test_VS585400" name="test_hovertrack" time="23.298" /><testcase classname="test_VS585400" name="test_All" time="30.981" /><testcase classname="test_VS585400" name="test_clear" time="27.498" /><testcase classname="test_VS585400" name="test_randomselect" time="29.598" /><testcase classname="test_VS585400" name="test_add" time="36.846" /><testcase classname="test_VS585400" name="test_cancel" time="30.949" /><testcase classname="test_VS585400" name="test_search" time="26.669" /><testcase classname="test_VS585400" name="test_search_none" time="26.768" /><testcase classname="test_VS585400" name="test_checkadd" time="36.071" /><testcase classname="test_VS585400" name="test_checknull" time="36.062" /><testcase classname="test_VS591770.Testtitle_bar" name="test_AuditReason" time="22.105"><failure message="selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;mat-icon _ngcontent-baw-c249=&quot;&quot; role=&quot;img&quot; class=&quot;mat-icon notranslate mat-tooltip-trigger mat-icon-no-color&quot; aria-hidden=&quot;true&quot; data-mat-icon-type=&quot;svg&quot; data-mat-icon-name=&quot;settings&quot; aria-describedby=&quot;cdk-describedby-message-2&quot; cdk-describedby-host=&quot;&quot;&gt;...&lt;/mat-icon&gt; is not clickable at point (23, 182). Other element would receive the click: &lt;div _ngcontent-baw-c155=&quot;&quot; fxlayout=&quot;column&quot; fxlayoutalign=&quot;center center&quot; fxlayoutgap=&quot;30px&quot; fxlayoutgap.lt-md=&quot;10px&quot; fxflex=&quot;50%&quot; fxflex.lt-md=&quot;60%&quot; class=&quot;form&quot; style=&quot;flex-direction: column; box-sizing: border-box; display: flex; place-content: center; align-items: center; flex: 1 1 100%; max-width: 50%;&quot;&gt;...&lt;/div&gt;&#10;  (Session info: chrome=98.0.4758.102)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00CA69A3+2582947]&#10;&#09;Ordinal0 [0x00C3A6D1+2139857]&#10;&#09;Ordinal0 [0x00B33A98+1063576]&#10;&#09;Ordinal0 [0x00B6636F+1270639]&#10;&#09;Ordinal0 [0x00B645B7+1263031]&#10;&#09;Ordinal0 [0x00B6220B+1253899]&#10;&#09;Ordinal0 [0x00B60FF9+1249273]&#10;&#09;Ordinal0 [0x00B56B53+1207123]&#10;&#09;Ordinal0 [0x00B7854C+1344844]&#10;&#09;Ordinal0 [0x00B56524+1205540]&#10;&#09;Ordinal0 [0x00B786A4+1345188]&#10;&#09;Ordinal0 [0x00B8834A+1409866]&#10;&#09;Ordinal0 [0x00B78366+1344358]&#10;&#09;Ordinal0 [0x00B55176+1200502]&#10;&#09;Ordinal0 [0x00B56066+1204326]&#10;&#09;GetHandleVerifier [0x00E4BE02+1675858]&#10;&#09;GetHandleVerifier [0x00F0036C+2414524]&#10;&#09;GetHandleVerifier [0x00D3BB01+560977]&#10;&#09;GetHandleVerifier [0x00D3A8D3+556323]&#10;&#09;Ordinal0 [0x00C4020E+2163214]&#10;&#09;Ordinal0 [0x00C45078+2183288]&#10;&#09;Ordinal0 [0x00C451C0+2183616]&#10;&#09;Ordinal0 [0x00C4EE1C+2223644]&#10;&#09;BaseThreadInitThunk [0x74B50419+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972FD+237]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972CD+189]">self = &lt;testcase.test_VS591770.Testtitle_bar object at 0x00000129E25D7D60&gt;
browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="9045559fd22c221a517a76e33281c034")&gt;

    def test_AuditReason(self, browser):
&gt;       browser.find_element_by_xpath("//mat-icon[@data-mat-icon-name='settings']").click()

test_VS591770.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\python39\lib\site-packages\selenium\webdriver\remote\webelement.py:81: in click
    self._execute(Command.CLICK_ELEMENT)
c:\python39\lib\site-packages\selenium\webdriver\remote\webelement.py:710: in _execute
    return self._parent.execute(command, params)
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:424: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000129E3132D90&gt;
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x770972FD+237]\\n\\tRtlGetAppContainerNamedObjectPath [0x770972CD+189]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;mat-icon _ngcontent-baw-c249="" role="img" class="mat-icon notranslate mat-tooltip-trigger mat-icon-no-color" aria-hidden="true" data-mat-icon-type="svg" data-mat-icon-name="settings" aria-describedby="cdk-describedby-message-2" cdk-describedby-host=""&gt;...&lt;/mat-icon&gt; is not clickable at point (23, 182). Other element would receive the click: &lt;div _ngcontent-baw-c155="" fxlayout="column" fxlayoutalign="center center" fxlayoutgap="30px" fxlayoutgap.lt-md="10px" fxflex="50%" fxflex.lt-md="60%" class="form" style="flex-direction: column; box-sizing: border-box; display: flex; place-content: center; align-items: center; flex: 1 1 100%; max-width: 50%;"&gt;...&lt;/div&gt;
E         (Session info: chrome=98.0.4758.102)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00CA69A3+2582947]
E       	Ordinal0 [0x00C3A6D1+2139857]
E       	Ordinal0 [0x00B33A98+1063576]
E       	Ordinal0 [0x00B6636F+1270639]
E       	Ordinal0 [0x00B645B7+1263031]
E       	Ordinal0 [0x00B6220B+1253899]
E       	Ordinal0 [0x00B60FF9+1249273]
E       	Ordinal0 [0x00B56B53+1207123]
E       	Ordinal0 [0x00B7854C+1344844]
E       	Ordinal0 [0x00B56524+1205540]
E       	Ordinal0 [0x00B786A4+1345188]
E       	Ordinal0 [0x00B8834A+1409866]
E       	Ordinal0 [0x00B78366+1344358]
E       	Ordinal0 [0x00B55176+1200502]
E       	Ordinal0 [0x00B56066+1204326]
E       	GetHandleVerifier [0x00E4BE02+1675858]
E       	GetHandleVerifier [0x00F0036C+2414524]
E       	GetHandleVerifier [0x00D3BB01+560977]
E       	GetHandleVerifier [0x00D3A8D3+556323]
E       	Ordinal0 [0x00C4020E+2163214]
E       	Ordinal0 [0x00C45078+2183288]
E       	Ordinal0 [0x00C451C0+2183616]
E       	Ordinal0 [0x00C4EE1C+2223644]
E       	BaseThreadInitThunk [0x74B50419+25]
E       	RtlGetAppContainerNamedObjectPath [0x770972FD+237]
E       	RtlGetAppContainerNamedObjectPath [0x770972CD+189]

c:\python39\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: ElementClickInterceptedException</failure></testcase><testcase classname="test_VS591770.Testtitle_bar" name="test_select" time="33.687"><failure message="assert 'process-order' in 'http://administrator:Aspen100@apem-c-d7/ApemMobile/#/parameters?orderId=30702677&amp;orderName=2BPLS&amp;batchName=wqqwe'&#10; +  where 'http://administrator:Aspen100@apem-c-d7/ApemMobile/#/parameters?orderId=30702677&amp;orderName=2BPLS&amp;batchName=wqqwe' = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session=&quot;a616c4bf55f215f054ced8ecddd3fe2f&quot;)&gt;.current_url">self = &lt;testcase.test_VS591770.Testtitle_bar object at 0x00000129E25D7F40&gt;
browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="a616c4bf55f215f054ced8ecddd3fe2f")&gt;

    def test_select(self, browser):
        setting = browser.find_element_by_xpath("//mat-icon[@data-mat-icon-name='settings']")
        Common(browser).eleclick(setting)
        browser.find_element_by_xpath("/html/body/app-root/div/app-settings/div/div[2]/mat-form-field/div/div[1]/div/input").send_keys("test")
        checkbox = browser.find_element_by_xpath("//input[@type='checkbox']")
        if checkbox.get_attribute('aria-checked') == 'false':
            Common(browser).eleclick(checkbox)
        time.sleep(5)
        browser.find_element_by_xpath("//mat-icon[@data-mat-icon-name='process_order']").click()
        time.sleep(2)
        browser.find_elements_by_css_selector("div[class ~= 'order-with-param']")[0].click()
        time.sleep(2)
        phase_ele = browser.find_element_by_xpath("//app-parameters/div[3]/div[1]/cdk-tree/cdk-nested-tree-node[1]/button/span[1]/mat-icon")
        Common(browser).eleclick(phase_ele)
        browser.find_element_by_css_selector("div.ng-star-inserted").find_element_by_tag_name("input").send_keys('2')
        browser.find_element_by_xpath("//span[text()=' OK ']/..").click()
        time.sleep(2)
&gt;       assert "process-order" in browser.current_url
E       assert 'process-order' in 'http://administrator:Aspen100@apem-c-d7/ApemMobile/#/parameters?orderId=30702677&amp;orderName=2BPLS&amp;batchName=wqqwe'
E        +  where 'http://administrator:Aspen100@apem-c-d7/ApemMobile/#/parameters?orderId=30702677&amp;orderName=2BPLS&amp;batchName=wqqwe' = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="a616c4bf55f215f054ced8ecddd3fe2f")&gt;.current_url

test_VS591770.py:31: AssertionError</failure></testcase><testcase classname="test_VS591770.Testtitle_bar" name="test_no_select" time="33.748" /><testcase classname="test_VS591819.Testtitle_bar" name="test_DarkMode" time="31.357" /><testcase classname="test_VS591819.Testtitle_bar" name="test_diffuser" time="9.401" /><testcase classname="test_VS591819.Testtitle_bar" name="test_offDarkMode" time="26.255" /><testcase classname="test_VS591822" name="test_gotoTrack" time="26.909" /><testcase classname="test_VS591825" name="test_checkdefaultview" time="31.019" /><testcase classname="test_VS591827.Testtitle_bar" name="test_GatherOn" time="30.335" /><testcase classname="test_VS591827.Testtitle_bar" name="test_GatherOff" time="22.132"><failure message="selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;mat-icon _ngcontent-qrt-c249=&quot;&quot; role=&quot;img&quot; class=&quot;mat-icon notranslate mat-tooltip-trigger mat-icon-no-color&quot; aria-hidden=&quot;true&quot; data-mat-icon-type=&quot;svg&quot; data-mat-icon-name=&quot;settings&quot; aria-describedby=&quot;cdk-describedby-message-2&quot; cdk-describedby-host=&quot;&quot;&gt;...&lt;/mat-icon&gt; is not clickable at point (23, 182). Other element would receive the click: &lt;div _ngcontent-qrt-c155=&quot;&quot; fxlayout=&quot;column&quot; fxlayoutalign=&quot;center center&quot; fxlayoutgap=&quot;30px&quot; fxlayoutgap.lt-md=&quot;10px&quot; fxflex=&quot;50%&quot; fxflex.lt-md=&quot;60%&quot; class=&quot;form&quot; style=&quot;flex-direction: column; box-sizing: border-box; display: flex; place-content: center; align-items: center; flex: 1 1 100%; max-width: 50%;&quot;&gt;...&lt;/div&gt;&#10;  (Session info: chrome=98.0.4758.102)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00CA69A3+2582947]&#10;&#09;Ordinal0 [0x00C3A6D1+2139857]&#10;&#09;Ordinal0 [0x00B33A98+1063576]&#10;&#09;Ordinal0 [0x00B6636F+1270639]&#10;&#09;Ordinal0 [0x00B645B7+1263031]&#10;&#09;Ordinal0 [0x00B6220B+1253899]&#10;&#09;Ordinal0 [0x00B60FF9+1249273]&#10;&#09;Ordinal0 [0x00B56B53+1207123]&#10;&#09;Ordinal0 [0x00B7854C+1344844]&#10;&#09;Ordinal0 [0x00B56524+1205540]&#10;&#09;Ordinal0 [0x00B786A4+1345188]&#10;&#09;Ordinal0 [0x00B8834A+1409866]&#10;&#09;Ordinal0 [0x00B78366+1344358]&#10;&#09;Ordinal0 [0x00B55176+1200502]&#10;&#09;Ordinal0 [0x00B56066+1204326]&#10;&#09;GetHandleVerifier [0x00E4BE02+1675858]&#10;&#09;GetHandleVerifier [0x00F0036C+2414524]&#10;&#09;GetHandleVerifier [0x00D3BB01+560977]&#10;&#09;GetHandleVerifier [0x00D3A8D3+556323]&#10;&#09;Ordinal0 [0x00C4020E+2163214]&#10;&#09;Ordinal0 [0x00C45078+2183288]&#10;&#09;Ordinal0 [0x00C451C0+2183616]&#10;&#09;Ordinal0 [0x00C4EE1C+2223644]&#10;&#09;BaseThreadInitThunk [0x74B50419+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972FD+237]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972CD+189]">self = &lt;testcase.test_VS591827.Testtitle_bar object at 0x00000129E25FAB80&gt;
browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="f025c0e293bb70b7517a9997549e353a")&gt;

    def test_GatherOff(self, browser):
&gt;       browser.find_element_by_xpath("//mat-icon[@data-mat-icon-name='settings']").click()

test_VS591827.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\python39\lib\site-packages\selenium\webdriver\remote\webelement.py:81: in click
    self._execute(Command.CLICK_ELEMENT)
c:\python39\lib\site-packages\selenium\webdriver\remote\webelement.py:710: in _execute
    return self._parent.execute(command, params)
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:424: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000129E3248BE0&gt;
response = {'status': 400, 'value': '{"value":{"error":"element click intercepted","message":"element click intercepted: Element ...\n\\tRtlGetAppContainerNamedObjectPath [0x770972FD+237]\\n\\tRtlGetAppContainerNamedObjectPath [0x770972CD+189]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element &lt;mat-icon _ngcontent-qrt-c249="" role="img" class="mat-icon notranslate mat-tooltip-trigger mat-icon-no-color" aria-hidden="true" data-mat-icon-type="svg" data-mat-icon-name="settings" aria-describedby="cdk-describedby-message-2" cdk-describedby-host=""&gt;...&lt;/mat-icon&gt; is not clickable at point (23, 182). Other element would receive the click: &lt;div _ngcontent-qrt-c155="" fxlayout="column" fxlayoutalign="center center" fxlayoutgap="30px" fxlayoutgap.lt-md="10px" fxflex="50%" fxflex.lt-md="60%" class="form" style="flex-direction: column; box-sizing: border-box; display: flex; place-content: center; align-items: center; flex: 1 1 100%; max-width: 50%;"&gt;...&lt;/div&gt;
E         (Session info: chrome=98.0.4758.102)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00CA69A3+2582947]
E       	Ordinal0 [0x00C3A6D1+2139857]
E       	Ordinal0 [0x00B33A98+1063576]
E       	Ordinal0 [0x00B6636F+1270639]
E       	Ordinal0 [0x00B645B7+1263031]
E       	Ordinal0 [0x00B6220B+1253899]
E       	Ordinal0 [0x00B60FF9+1249273]
E       	Ordinal0 [0x00B56B53+1207123]
E       	Ordinal0 [0x00B7854C+1344844]
E       	Ordinal0 [0x00B56524+1205540]
E       	Ordinal0 [0x00B786A4+1345188]
E       	Ordinal0 [0x00B8834A+1409866]
E       	Ordinal0 [0x00B78366+1344358]
E       	Ordinal0 [0x00B55176+1200502]
E       	Ordinal0 [0x00B56066+1204326]
E       	GetHandleVerifier [0x00E4BE02+1675858]
E       	GetHandleVerifier [0x00F0036C+2414524]
E       	GetHandleVerifier [0x00D3BB01+560977]
E       	GetHandleVerifier [0x00D3A8D3+556323]
E       	Ordinal0 [0x00C4020E+2163214]
E       	Ordinal0 [0x00C45078+2183288]
E       	Ordinal0 [0x00C451C0+2183616]
E       	Ordinal0 [0x00C4EE1C+2223644]
E       	BaseThreadInitThunk [0x74B50419+25]
E       	RtlGetAppContainerNamedObjectPath [0x770972FD+237]
E       	RtlGetAppContainerNamedObjectPath [0x770972CD+189]

c:\python39\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: ElementClickInterceptedException</failure></testcase><testcase classname="test_VS591862" name="test_columns" time="116.083" /><testcase classname="test_VS591862" name="test_colums_Con" time="91.648" /><testcase classname="test_VS591865" name="test_sorttrack" time="24.371"><failure message="IndexError: list index out of range">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="e9e0d9efde443d1903439bc5e2dd906d")&gt;

    def test_sorttrack(browser):
        time.sleep(3)
        columns_list = ['checkAuto.', 'checkAssigned WkSt.', 'checkUser Status', 'checkExecuting WkSt.', 'checkExecuting User', 'checkRepetition Count', 'checkUser RUDO', 'checkWkSt. RUDO']
        track = browser.find_elements_by_css_selector("mat-icon[data-mat-icon-name='double_arrow']")
&gt;       Common(browser).eleclick(track[0])
E       IndexError: list index out of range

test_VS591865.py:10: IndexError</failure></testcase><testcase classname="test_VS591875.TesttrackFilter" name="test_filtertrack_number" time="72.083" /><testcase classname="test_VS591875.TesttrackFilter" name="test_selectall" time="164.397" /><testcase classname="test_VS591875.TesttrackFilter" name="test_filterclear" time="129.004" /><testcase classname="test_VS591875.TesttrackFilter" name="test_filterrandom" time="166.006" /><testcase classname="test_VS591875.TesttrackFilter" name="test_cancel" time="219.561" /><testcase classname="test_VS591875.TesttrackFilter" name="test_search" time="184.657" /><testcase classname="test_VS591876" name="test_trackscroll" time="24.408" /><testcase classname="test_VS591893" name="test_changeorder" time="21.110"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//app-filter-box[@id='filterLOGIC_STATUS']/mat-icon&quot;}&#10;  (Session info: chrome=98.0.4758.102)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00CA69A3+2582947]&#10;&#09;Ordinal0 [0x00C3A6D1+2139857]&#10;&#09;Ordinal0 [0x00B33A98+1063576]&#10;&#09;Ordinal0 [0x00B5FF3E+1244990]&#10;&#09;Ordinal0 [0x00B6013B+1245499]&#10;&#09;Ordinal0 [0x00B89F52+1417042]&#10;&#09;Ordinal0 [0x00B78594+1344916]&#10;&#09;Ordinal0 [0x00B8834A+1409866]&#10;&#09;Ordinal0 [0x00B78366+1344358]&#10;&#09;Ordinal0 [0x00B55176+1200502]&#10;&#09;Ordinal0 [0x00B56066+1204326]&#10;&#09;GetHandleVerifier [0x00E4BE02+1675858]&#10;&#09;GetHandleVerifier [0x00F0036C+2414524]&#10;&#09;GetHandleVerifier [0x00D3BB01+560977]&#10;&#09;GetHandleVerifier [0x00D3A8D3+556323]&#10;&#09;Ordinal0 [0x00C4020E+2163214]&#10;&#09;Ordinal0 [0x00C45078+2183288]&#10;&#09;Ordinal0 [0x00C451C0+2183616]&#10;&#09;Ordinal0 [0x00C4EE1C+2223644]&#10;&#09;BaseThreadInitThunk [0x74B50419+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972FD+237]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972CD+189]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="13481f3e48a292e64f4ff4e5ad1a3e14")&gt;

    def test_changeorder(browser):
&gt;       target = browser.find_element_by_xpath("//app-filter-box[@id='filterLOGIC_STATUS']/mat-icon")

test_VS591893.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:520: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:1244: in find_element
    return self.execute(Command.FIND_ELEMENT, {
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:424: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000129E33B7730&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x770972FD+237]\\n\\tRtlGetAppContainerNamedObjectPath [0x770972CD+189]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//app-filter-box[@id='filterLOGIC_STATUS']/mat-icon"}
E         (Session info: chrome=98.0.4758.102)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00CA69A3+2582947]
E       	Ordinal0 [0x00C3A6D1+2139857]
E       	Ordinal0 [0x00B33A98+1063576]
E       	Ordinal0 [0x00B5FF3E+1244990]
E       	Ordinal0 [0x00B6013B+1245499]
E       	Ordinal0 [0x00B89F52+1417042]
E       	Ordinal0 [0x00B78594+1344916]
E       	Ordinal0 [0x00B8834A+1409866]
E       	Ordinal0 [0x00B78366+1344358]
E       	Ordinal0 [0x00B55176+1200502]
E       	Ordinal0 [0x00B56066+1204326]
E       	GetHandleVerifier [0x00E4BE02+1675858]
E       	GetHandleVerifier [0x00F0036C+2414524]
E       	GetHandleVerifier [0x00D3BB01+560977]
E       	GetHandleVerifier [0x00D3A8D3+556323]
E       	Ordinal0 [0x00C4020E+2163214]
E       	Ordinal0 [0x00C45078+2183288]
E       	Ordinal0 [0x00C451C0+2183616]
E       	Ordinal0 [0x00C4EE1C+2223644]
E       	BaseThreadInitThunk [0x74B50419+25]
E       	RtlGetAppContainerNamedObjectPath [0x770972FD+237]
E       	RtlGetAppContainerNamedObjectPath [0x770972CD+189]

c:\python39\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VS626781" name="test_bing" time="25.278"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//*[@id='tracking-content']/app-tracking-list/div/div[2]/table/tbody/tr/td[12]/div/div/a/mat-icon&quot;}&#10;  (Session info: chrome=98.0.4758.102)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00CA69A3+2582947]&#10;&#09;Ordinal0 [0x00C3A6D1+2139857]&#10;&#09;Ordinal0 [0x00B33A98+1063576]&#10;&#09;Ordinal0 [0x00B5FF3E+1244990]&#10;&#09;Ordinal0 [0x00B6013B+1245499]&#10;&#09;Ordinal0 [0x00B89F52+1417042]&#10;&#09;Ordinal0 [0x00B78594+1344916]&#10;&#09;Ordinal0 [0x00B8834A+1409866]&#10;&#09;Ordinal0 [0x00B78366+1344358]&#10;&#09;Ordinal0 [0x00B55176+1200502]&#10;&#09;Ordinal0 [0x00B56066+1204326]&#10;&#09;GetHandleVerifier [0x00E4BE02+1675858]&#10;&#09;GetHandleVerifier [0x00F0036C+2414524]&#10;&#09;GetHandleVerifier [0x00D3BB01+560977]&#10;&#09;GetHandleVerifier [0x00D3A8D3+556323]&#10;&#09;Ordinal0 [0x00C4020E+2163214]&#10;&#09;Ordinal0 [0x00C45078+2183288]&#10;&#09;Ordinal0 [0x00C451C0+2183616]&#10;&#09;Ordinal0 [0x00C4EE1C+2223644]&#10;&#09;BaseThreadInitThunk [0x74B50419+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972FD+237]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972CD+189]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="5afd4cbc191ec912976609cfbcd7dfdc")&gt;

    def test_bing(browser):
    
        time.sleep(2)
        order_ele = browser.find_element_by_xpath("//div[contains(text(),'FOR_BING')]/../..")
        order_ele.find_elements_by_tag_name("td")[-1].click()
        time.sleep(2)
&gt;       browser.find_element_by_xpath("//*[@id='tracking-content']/app-tracking-list/div/div[2]/table/tbody/tr/td[12]/div/div/a/mat-icon").click()

test_VS626781.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:520: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:1244: in find_element
    return self.execute(Command.FIND_ELEMENT, {
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:424: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000129E333E520&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x770972FD+237]\\n\\tRtlGetAppContainerNamedObjectPath [0x770972CD+189]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//*[@id='tracking-content']/app-tracking-list/div/div[2]/table/tbody/tr/td[12]/div/div/a/mat-icon"}
E         (Session info: chrome=98.0.4758.102)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00CA69A3+2582947]
E       	Ordinal0 [0x00C3A6D1+2139857]
E       	Ordinal0 [0x00B33A98+1063576]
E       	Ordinal0 [0x00B5FF3E+1244990]
E       	Ordinal0 [0x00B6013B+1245499]
E       	Ordinal0 [0x00B89F52+1417042]
E       	Ordinal0 [0x00B78594+1344916]
E       	Ordinal0 [0x00B8834A+1409866]
E       	Ordinal0 [0x00B78366+1344358]
E       	Ordinal0 [0x00B55176+1200502]
E       	Ordinal0 [0x00B56066+1204326]
E       	GetHandleVerifier [0x00E4BE02+1675858]
E       	GetHandleVerifier [0x00F0036C+2414524]
E       	GetHandleVerifier [0x00D3BB01+560977]
E       	GetHandleVerifier [0x00D3A8D3+556323]
E       	Ordinal0 [0x00C4020E+2163214]
E       	Ordinal0 [0x00C45078+2183288]
E       	Ordinal0 [0x00C451C0+2183616]
E       	Ordinal0 [0x00C4EE1C+2223644]
E       	BaseThreadInitThunk [0x74B50419+25]
E       	RtlGetAppContainerNamedObjectPath [0x770972FD+237]
E       	RtlGetAppContainerNamedObjectPath [0x770972CD+189]

c:\python39\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VS626810" name="test_IconStatus" time="31.171" /><testcase classname="test_VS627824" name="test_goto_param" time="33.434" /><testcase classname="test_VS627837" name="test_ParaPage" time="50.437" /><testcase classname="test_VS627866" name="test_CheckdiffMode" time="52.437" /><testcase classname="test_VS627898" name="test_Check_structure" time="31.080"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//div[contains(text(),'2BPLS')]&quot;}&#10;  (Session info: chrome=98.0.4758.102)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00CA69A3+2582947]&#10;&#09;Ordinal0 [0x00C3A6D1+2139857]&#10;&#09;Ordinal0 [0x00B33A98+1063576]&#10;&#09;Ordinal0 [0x00B5FF3E+1244990]&#10;&#09;Ordinal0 [0x00B6013B+1245499]&#10;&#09;Ordinal0 [0x00B89F52+1417042]&#10;&#09;Ordinal0 [0x00B78594+1344916]&#10;&#09;Ordinal0 [0x00B8834A+1409866]&#10;&#09;Ordinal0 [0x00B78366+1344358]&#10;&#09;Ordinal0 [0x00B55176+1200502]&#10;&#09;Ordinal0 [0x00B56066+1204326]&#10;&#09;GetHandleVerifier [0x00E4BE02+1675858]&#10;&#09;GetHandleVerifier [0x00F0036C+2414524]&#10;&#09;GetHandleVerifier [0x00D3BB01+560977]&#10;&#09;GetHandleVerifier [0x00D3A8D3+556323]&#10;&#09;Ordinal0 [0x00C4020E+2163214]&#10;&#09;Ordinal0 [0x00C45078+2183288]&#10;&#09;Ordinal0 [0x00C451C0+2183616]&#10;&#09;Ordinal0 [0x00C4EE1C+2223644]&#10;&#09;BaseThreadInitThunk [0x74B50419+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972FD+237]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972CD+189]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="abf062073d6106bd14b9e93c1799c334")&gt;

    def test_Check_structure(browser):
        time.sleep(10)
&gt;       order_ele = browser.find_element_by_xpath("//div[contains(text(),'2BPLS')]")

test_VS627898.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:520: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:1244: in find_element
    return self.execute(Command.FIND_ELEMENT, {
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:424: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000129E342D160&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x770972FD+237]\\n\\tRtlGetAppContainerNamedObjectPath [0x770972CD+189]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[contains(text(),'2BPLS')]"}
E         (Session info: chrome=98.0.4758.102)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00CA69A3+2582947]
E       	Ordinal0 [0x00C3A6D1+2139857]
E       	Ordinal0 [0x00B33A98+1063576]
E       	Ordinal0 [0x00B5FF3E+1244990]
E       	Ordinal0 [0x00B6013B+1245499]
E       	Ordinal0 [0x00B89F52+1417042]
E       	Ordinal0 [0x00B78594+1344916]
E       	Ordinal0 [0x00B8834A+1409866]
E       	Ordinal0 [0x00B78366+1344358]
E       	Ordinal0 [0x00B55176+1200502]
E       	Ordinal0 [0x00B56066+1204326]
E       	GetHandleVerifier [0x00E4BE02+1675858]
E       	GetHandleVerifier [0x00F0036C+2414524]
E       	GetHandleVerifier [0x00D3BB01+560977]
E       	GetHandleVerifier [0x00D3A8D3+556323]
E       	Ordinal0 [0x00C4020E+2163214]
E       	Ordinal0 [0x00C45078+2183288]
E       	Ordinal0 [0x00C451C0+2183616]
E       	Ordinal0 [0x00C4EE1C+2223644]
E       	BaseThreadInitThunk [0x74B50419+25]
E       	RtlGetAppContainerNamedObjectPath [0x770972FD+237]
E       	RtlGetAppContainerNamedObjectPath [0x770972CD+189]

c:\python39\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VS627904" name="test_CheckDetails" time="38.604" /><testcase classname="test_VS627922" name="test_ParaPage" time="77.344" /><testcase classname="test_VS628336" name="test_Breadcrumb" time="40.979" /><testcase classname="test_VS628342" name="test_Toolbar" time="88.516" /><testcase classname="test_VS628365" name="test_Queue" time="74.194"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//div[contains(text(),'2BPLS')]/../..&quot;}&#10;  (Session info: chrome=98.0.4758.102)&#10;Stacktrace:&#10;Backtrace:&#10;&#09;Ordinal0 [0x00CA69A3+2582947]&#10;&#09;Ordinal0 [0x00C3A6D1+2139857]&#10;&#09;Ordinal0 [0x00B33A98+1063576]&#10;&#09;Ordinal0 [0x00B5FF3E+1244990]&#10;&#09;Ordinal0 [0x00B6013B+1245499]&#10;&#09;Ordinal0 [0x00B89F52+1417042]&#10;&#09;Ordinal0 [0x00B78594+1344916]&#10;&#09;Ordinal0 [0x00B8834A+1409866]&#10;&#09;Ordinal0 [0x00B78366+1344358]&#10;&#09;Ordinal0 [0x00B55176+1200502]&#10;&#09;Ordinal0 [0x00B56066+1204326]&#10;&#09;GetHandleVerifier [0x00E4BE02+1675858]&#10;&#09;GetHandleVerifier [0x00F0036C+2414524]&#10;&#09;GetHandleVerifier [0x00D3BB01+560977]&#10;&#09;GetHandleVerifier [0x00D3A8D3+556323]&#10;&#09;Ordinal0 [0x00C4020E+2163214]&#10;&#09;Ordinal0 [0x00C45078+2183288]&#10;&#09;Ordinal0 [0x00C451C0+2183616]&#10;&#09;Ordinal0 [0x00C4EE1C+2223644]&#10;&#09;BaseThreadInitThunk [0x74B50419+25]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972FD+237]&#10;&#09;RtlGetAppContainerNamedObjectPath [0x770972CD+189]">browser = &lt;selenium.webdriver.chrome.webdriver.WebDriver (session="7b6098716a9f87b791cba63968d3386b")&gt;

    def test_Queue(browser):
        time.sleep(4)
        order_ele = browser.find_element_by_xpath("//div[contains(text(),'2BPLS')]/../..")
        order_ele.find_elements_by_tag_name("td")[-1].click()
        time.sleep(5)
        phase_list = browser.find_elements_by_xpath("//*[@id='tracking-content']/app-tracking-list/div/div[2]/table/tbody/tr/td[12]/div/div/div/a/mat-icon")
        Common(browser).eleclick(phase_list[0])
        time.sleep(5)
        # Check the queue on execution page is 0 on the right of top page
        Queue_number1 = re.sub(r'\D', "", browser.find_element_by_xpath("//*[@id='queue-title']/div").text)
        assert Queue_number1 == '0'
        browser.find_element_by_xpath("//*[@id='order']").click()
        time.sleep(2)
        # Check the queue on PFC page, the queue is 1
        browser.find_element_by_xpath("//mat-icon[@data-mat-icon-name='graphic_view_blue']/../..").click()
        time.sleep(2)
        Queue_number2 = re.sub(r'\D', "", browser.find_element_by_xpath("//*[@id='queue-title']/div").text)
        assert Queue_number2 == '1'
        browser.close()
        # user2
        browser = login()
        MainPage(browser).logout()
        time.sleep(3)
        browser.find_element_by_xpath("/html/body/app-root/div/app-logout/div/button").click()
        time.sleep(3)
        browser.find_element_by_xpath('//*[@id="username"]').send_keys('corp\\qapart')
        browser.find_element_by_xpath('//input[@type="password"]').send_keys('QQQaaa000')
        browser.find_element_by_id('signInBtn').click()
        time.sleep(4)
&gt;       order_ele = browser.find_element_by_xpath("//div[contains(text(),'2BPLS')]/../..")

test_VS628365.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:520: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:1244: in find_element
    return self.execute(Command.FIND_ELEMENT, {
c:\python39\lib\site-packages\selenium\webdriver\remote\webdriver.py:424: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000129E3348C70&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x770972FD+237]\\n\\tRtlGetAppContainerNamedObjectPath [0x770972CD+189]\\n"}}'}

    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, str):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:
            exception_class = NoSuchShadowRootException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if not value:
            value = response['value']
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None  # type: ignore[assignment]
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        st_value = value.get('stackTrace') or value.get('stacktrace')
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split('\n')
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = self._value_or_default(frame, 'lineNumber', '')
                        file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                        if line:
                            file = "%s:%s" % (file, line)
                        meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                        if 'className' in frame:
                            meth = "%s.%s" % (frame['className'], meth)
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//div[contains(text(),'2BPLS')]/../.."}
E         (Session info: chrome=98.0.4758.102)
E       Stacktrace:
E       Backtrace:
E       	Ordinal0 [0x00CA69A3+2582947]
E       	Ordinal0 [0x00C3A6D1+2139857]
E       	Ordinal0 [0x00B33A98+1063576]
E       	Ordinal0 [0x00B5FF3E+1244990]
E       	Ordinal0 [0x00B6013B+1245499]
E       	Ordinal0 [0x00B89F52+1417042]
E       	Ordinal0 [0x00B78594+1344916]
E       	Ordinal0 [0x00B8834A+1409866]
E       	Ordinal0 [0x00B78366+1344358]
E       	Ordinal0 [0x00B55176+1200502]
E       	Ordinal0 [0x00B56066+1204326]
E       	GetHandleVerifier [0x00E4BE02+1675858]
E       	GetHandleVerifier [0x00F0036C+2414524]
E       	GetHandleVerifier [0x00D3BB01+560977]
E       	GetHandleVerifier [0x00D3A8D3+556323]
E       	Ordinal0 [0x00C4020E+2163214]
E       	Ordinal0 [0x00C45078+2183288]
E       	Ordinal0 [0x00C451C0+2183616]
E       	Ordinal0 [0x00C4EE1C+2223644]
E       	BaseThreadInitThunk [0x74B50419+25]
E       	RtlGetAppContainerNamedObjectPath [0x770972FD+237]
E       	RtlGetAppContainerNamedObjectPath [0x770972CD+189]

c:\python39\lib\site-packages\selenium\webdriver\remote\errorhandler.py:247: NoSuchElementException</failure></testcase><testcase classname="test_VS629854" name="test_Phase_excute" time="58.746" /><testcase classname="test_VS629860" name="test_change_excute" time="67.383" /></testsuite></testsuites>